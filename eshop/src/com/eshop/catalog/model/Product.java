package com.eshop.catalog.model;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Version;

/**
 * Using the Joined inheritance strategy(Table per subclass) as polymorphic
 * associations and queries are required. Also Tire subclass has many additional
 * properties than the superclass product.
 * @author ssd1kor
 * @version 1.0
 * @updated 17-Oct-2012 3:50:23 PM
 */
@Entity
public class Product implements Serializable {

	private Long id;

	private int version;

	private String name;

	private String description;

	private Brand brand;

	private ProductSpec productSpec;

	private Set<CategorizedProduct> categorizedProducts = new HashSet<CategorizedProduct>();

	public Product() {

	}

	/**
	 * Primary key of the Product Object
	 * The key will be generated by Hibernate. Native generation strategy will be used.
	 * Native generation strategy generates primary keys using capabilities of underlying database
	 * With native generation the class becomes portable across different databases. 
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.TABLE)
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Version
	public int getVersion() {
		return version;
	}

	public void setVersion(int version) {
		this.version = version;
	}

	@ManyToOne
	@JoinColumn(name = "brand_id", nullable = false)
	public Brand getBrand() {
		return brand;
	}

	public void setBrand(Brand brand) {
		this.brand = brand;
	}

	@Column(nullable = false, unique = true)
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(nullable = false)
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@OneToMany(mappedBy="product")
	public ProductSpec getProductSpec() {
		return productSpec;
	}

	public void setProductSpec(ProductSpec productSpec) {
		this.productSpec = productSpec;
	}

	@OneToMany(mappedBy = "product")
	public Set<CategorizedProduct> getCategorizedProducts() {
		return categorizedProducts;
	}

	public void setCategorizedProducts(Set<CategorizedProduct> categorizedProducts) {
		this.categorizedProducts = categorizedProducts;
	}

	/**
	 * If this object is used as detached object, it can be outside guaranteed scope identity of persistence context.
	 * In this case there can be two different objects representing the same row in database. They will have same database identity 
	 * but different java identity. 
	 * Hence override equals and hashcode method as default check only java identity.
	 * 
	 * Use a business key comparison in the equals method. Business key characteristics are uniqueness, non-nullability and rare change.
	 * 
	 * Using id comparison in equals is strongly discouraged as id is assigned by Hibernate only after persistence. This can result in 
	 * changed hash value after object is added to a SET(Collection). This breaks SET contract.
	 * 
	 * Always use getters to compare properties of other object. This is to make sure the code works even if proxies are passed instead
	 * of real objects.
	 */
	@Override
	public boolean equals(Object other) {
		if (!(other instanceof Product)) {
			return false;
		}
		if (this == other) {
			return true;
		}
		final Product that = (Product) other;
		return this.name.equals(that.getName());
	}

	@Override
	public int hashCode() {
		return name.hashCode();
	}

}//end Product